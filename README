[Waste - Thrift + AMQP RPC]

* Introduction

Waste is an experimental module for RPC using Thrift and AMQP.
This is named so just because "waste" is an antonym of "thrift".
 
Motivation behind Waste is to utilize services in 
a fault-tolerant way from clients that are implemented
in different programming languages.

Some languages have provided RPC mechanisms, e.g. RMI in Java.
Those can be used between programs that are implemented in
the same programming language. However, sometimes, there are
situations where RPC between different programming languages
is necessary, say, to integrate services that are already
implemented in different programming languages.  

Thrift, which is originally developed at Facebook, is a solution
to this type of issue. Thrift can be thought of as a light-weigth CORBA.
Its design and implementation are simple enough to extend. 

Thrift + AMQP RPC extends a transport layer of Thrift so that it can
put requests from clients to a queue and dispatch the requests to
a service. If multiple services (on multiple physical servers)
are subscribing the queue, the load of the requests is balanced
among the servers. 


* How to build

** Install Erlang

Erlang runtime library and emulator can be downloaded at

http://www.erlang.org/download.html

Version R13B or later will be needed. Install it as instructed
in the package.


** Install Thrift

Thrift can be downloaded at

http://incubator.apache.org/thrift/download/

Install it as instructed in the package.


** Install RabbitMQ server and clients

The current implementation uses AMQP clients implemented
in Erlang and C for RabbitMQ, an open source AMQP broker
implemented in Erlang. The clients can be downloaded at

http://hg.rabbitmq.com/rabbitmq-c/file/84aaa77eba59
http://hg.rabbitmq.com/rabbitmq-erlang-client/file/1b62d52840c9

RabbitMQ can be downloaded at

http://hg.rabbitmq.com/rabbitmq-server/file/5dc463f43bb7

codegen will also be needed to build the clients and the server

http://hg.rabbitmq.com/rabbitmq-codegen/file/4a3ef7903d3e

Make sure that Version 1.5.5 is downloaded for both
the client and the server.

The directories would look like the following.

somewhere
in your home directory ----- rabbitmq-c
                         +-- rabbitmq-codegen
                         +-- rabbitmq-erlang-client
                         +-- rabbitmq-server
                         +-- waste

Each of them will need to be built one by one.


** Build

Go to waste/erl directory and make a symbolic link to rabbitmq-server
on that directory.

%> ln -s ../../rabbitmq-server rabbitmq-server

Return to wast/ directory and type "make". If everything goes well, TestClient and TestServer
will be created under waste/test/cpp


** Usage

Go to rabbitmq-server/ directory and type "make run". This will start RabbitMQ.
Go to waste/test/cpp and type "./TestServer". This will start the test server.
Go to waste/test/erl and type "./client.sh" and test_client:test() on the erlang console. This will send a request to the server.
