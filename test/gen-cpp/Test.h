/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef Test_H
#define Test_H

#include <TProcessor.h>
#include "Test_types.h"

namespace test {

class TestIf {
 public:
  virtual ~TestIf() {}
  virtual void echo(std::string& _return, const std::string& text) = 0;
};

class TestNull : virtual public TestIf {
 public:
  virtual ~TestNull() {}
  void echo(std::string& /* _return */, const std::string& /* text */) {
    return;
  }
};

class Test_echo_args {
 public:

  Test_echo_args() : text("") {
  }

  virtual ~Test_echo_args() throw() {}

  std::string text;

  struct __isset {
    __isset() : text(false) {}
    bool text;
  } __isset;

  bool operator == (const Test_echo_args & rhs) const
  {
    if (!(text == rhs.text))
      return false;
    return true;
  }
  bool operator != (const Test_echo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Test_echo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class Test_echo_pargs {
 public:


  virtual ~Test_echo_pargs() throw() {}

  const std::string* text;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class Test_echo_result {
 public:

  Test_echo_result() : success("") {
  }

  virtual ~Test_echo_result() throw() {}

  std::string success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const Test_echo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Test_echo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Test_echo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class Test_echo_presult {
 public:


  virtual ~Test_echo_presult() throw() {}

  std::string* success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TestClient : virtual public TestIf {
 public:
  TestClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  TestClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void echo(std::string& _return, const std::string& text);
  void send_echo(const std::string& text);
  void recv_echo(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TestProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<TestIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid);
 private:
  std::map<std::string, void (TestProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*)> processMap_;
  void process_echo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
 public:
  TestProcessor(boost::shared_ptr<TestIf> iface) :
    iface_(iface) {
    processMap_["echo"] = &TestProcessor::process_echo;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot);
  virtual ~TestProcessor() {}
};

class TestMultiface : virtual public TestIf {
 public:
  TestMultiface(std::vector<boost::shared_ptr<TestIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TestMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TestIf> > ifaces_;
  TestMultiface() {}
  void add(boost::shared_ptr<TestIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void echo(std::string& _return, const std::string& text) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->echo(_return, text);
        return;
      } else {
        ifaces_[i]->echo(_return, text);
      }
    }
  }

};

} // namespace

#endif
